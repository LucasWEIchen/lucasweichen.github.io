<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[vivarium1]]></title>
      <url>/2017/10/22/vivarium1/</url>
      <content type="html"><![CDATA[<p>最近都在忙着给家里的鱼缸搬家，旧的三重底滤不靠谱，经常漏水还泡了我的地板。<br>是时候做新缸了。<br>无奈墨尔本没有一个像样的玻璃切割工厂，做出的设计图没有人愿意接，只能找到一个做亚克力的切割工厂，凑合做吧~</p>
<p>#1 附上雨林缸设计图一份<br>

	<div class="row">
    <embed src="/images/VASS1.PDF" width="100%" height="550" type="application/pdf">
	</div>


<br>底部留有一个65mm直径的孔给底滤，还是内置三重底滤比较靠谱。以前的缸子是外置虹吸式三重底滤，各种不靠谱。<br>估计人家都不愿意接这活也是应为这个洞。</p>
<p><img src="/images/IMG_20171017_085915.jpg" alt="全景"><br>整个缸子一米高，半米宽，400mm深，下方存水的部分30厘米高，上面有一个十厘米的挡板。中间留出60厘米的窗。现在窗还没有安装，以后上了植物再安装。 缸顶上开了一个二十厘米的长方形口子，走灯/风扇/喷淋的线路。</p>
<p>底滤是个储物盒自己改的，里面塞了两层带孔亚力克板，最下面是泵，加热棒，紫外灯，上面是滤材，生化棉等等。<br><img src="/images/IMG_20171015_113104.jpg" alt="底滤1"><br><img src="/images/IMG_20171017_085839.jpg" alt="底滤2"><br><img src="/images/IMG_20171017_085844.jpg" alt="底滤3"></p>
<p>65mm的洞直接拧上三重底滤套件，稍后给出购买传送门。<br><img src="/images/IMG_20171017_085849.jpg" alt="三重底滤套件"></p>
<p>这样基本上过滤组件就完成了，现在加上灯饰。<br>主要分为底部的观赏灯和顶部的植物灯。植物灯是很早以前的老鱼缸用的淘宝LED灯，当时买了三组。可是LED似乎对于半米以上的水深无能为力，用三组也无济于事，干脆撤了封存。这次正好拿出来用。三组产生的热量还是很可观的，正好后期还得加风扇，回头顺便给它们也吹吹。<br><img src="/images/IMG_20171017_085908.jpg" alt="顶部植物LED1"><br><img src="/images/IMG_20171017_085904.jpg" alt="顶部植物LED2"></p>
<p>剩下的就是观赏照明LED的，EBAY上淘来的车用12V LED 灯条买了好几组，很便宜。自己做好电源和接头，还可以买个遥控器，也没几美金。专门放了两个在水位线之下，方便看看水下世界。<br><img src="/images/IMG_20171017_085854.jpg" alt="底部LED"></p>
<p>经过一个礼拜的折腾，挑了几块沉木，试图营造出溶洞的效果。有点似像非像哈哈哈哈。沉木必然黄水，开灯以后也还好，看不出来。按照我的设计，水位线之上可以放一个兰花，之后上了背景板之后还可以再加几个空气凤梨和苔藓类。<br><img src="/images/IMG_20171022_202253.jpg" alt="沉木"></p>
<p>things to do:<br>还有几样事情没做</p>
<ol>
<li>背景板</li>
<li>喷淋</li>
<li>给鱼搬家</li>
<li>加入超声波加湿器</li>
<li>顶部加风扇</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Aquarium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vivarium </tag>
            
            <tag> 雨林缸 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCVimutilsNoneTypeError]]></title>
      <url>/2017/09/05/OpenCVimutilsNoneTypeError/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;camlock/camlock2.py&quot;, line 76, in &lt;module&gt;</div><div class="line">    frame = imutils.resize(frame, width=640, height= 480)</div><div class="line">  File &quot;/usr/local/lib/python2.7/dist-packages/imutils/convenience.py&quot;, line 69, in resize</div><div class="line">    (h, w) = image.shape[:2]</div><div class="line">AttributeError: &apos;NoneType&apos; object has no attribute &apos;shape&apos;</div></pre></td></tr></table></figure>
<p>早上突然出现了这个错误。网上搜了很多都说是视频的源路径出错导致传给了imutils空的路径。可是测试树莓派摄像头时却一切正常。<br>突然想起昨晚装的 v4l-2 驱动好像没加载。测试之后果然修复了NoneTypeError.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo modprobe bcm2835-v4l2</div></pre></td></tr></table></figure>
<p>It could be the path problem, but in my case it is the v4l2 thing that makes the trouble.</p>
]]></content>
      
        <categories>
            
            <category> OpenCV </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Raspberry Pi </tag>
            
            <tag> OpenCV </tag>
            
            <tag> imutils </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多个树莓派ROS设备在局域网内的安装与设置]]></title>
      <url>/2017/08/17/ROSonMuiltiRaspi/</url>
      <content type="html"><![CDATA[<p>#花了两天时间研究如何在RaspberryPi1 Model B 上面部署ROS系统。 现在简单的总结一下遇到的问题：</p>
<ol>
<li><p>似乎Raspi1 model b+ 因为型号太老，只能承受 RoS indigo这个较老的版本。安装过程基本可以按照 <a href="http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi" target="_blank" rel="external">Ros WIKI上面的文件</a></p>
</li>
<li><p>安装过程很久，makefile随随便便就是五六个小时。请准备好电影零食。</p>
</li>
<li><p>如果要连接Arduino，你会发现安装之后的indigo不带ROS的 rosserial package。这需要去单独下载。应为这个包还没有被包含在源服务器上，只能去git上面单独下载。 尽量在第一次make之前就把需要手动安装的package都下载到src文件夹下，这样可以省去你后面反复make的烦恼。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd ~/ros_catkin_ws/src</div><div class="line">$ git clone https:// github.com/ros-drivers/rosserial</div><div class="line">#下面这两句会重新make一遍，又要去准备电影和零食。</div><div class="line">$ cd ~/ros_catkin_ws</div><div class="line">$ catkin_make</div></pre></td></tr></table></figure>
</li>
</ol>
<p>除了 rosserial， 我还用到了一个叫做common_msgs的包。地址是：<a href="https://github.com/ros/common_msgs" target="_blank" rel="external">https://github.com/ros/common_msgs</a><br>安装原理与rosserial相同。</p>
<ol>
<li><p>arduino 在树莓派1上没有被识别成ttyUSB设备。它指向ttyACM0。如果需要用ROS监听请设置好设备端口。在ROS环境下就是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosrun rosserial_python serial_node.py /dev/ttyACM0</div></pre></td></tr></table></figure>
</li>
<li><p>当在局域网内使用多个ROS设备时，需要设置一个master来运行roscore. 请参考<a href="http://wiki.ros.org/ROS/Tutorials/MultipleMachines" target="_blank" rel="external">这个</a>文档来设置。具体代码我放在这里备忘一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#在所有子设备上都要设置</div><div class="line">export ROS_MASTER_URI=http://192.168.32.101:11311</div></pre></td></tr></table></figure>
</li>
<li><p>Everything else just follow <a href="http://wiki.ros.org/rosserial_arduino/Tutorials" target="_blank" rel="external">this</a>.</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Raspberry Pi </tag>
            
            <tag> ROS </tag>
            
            <tag> Arduino </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[汇编语言MIPS的入门]]></title>
      <url>/2017/08/14/mips/</url>
      <content type="html"><![CDATA[<p>#最近一段时间都在忙着带汇编语言的课程。顺道自己也学了一下。</p>
<p>##Monash University用Mips来介绍汇编语言环境。配合MARS Simulator进行测试。</p>
<p>##其实隐隐觉得MARS里面有一些BUG， 很多时候程序的过程好像都不是很稳定。</p>
<ol>
<li><p>Convention<br>不同的写法和风格对应不同的convention。具体的中文翻译我说不上来，但是指的应该就是你写代码时参照的风格模板。 汇编与高级语言不同，其写法和逻辑自由度很高。 很多时候在不考虑效率的前提下可以衍生出很多方式去完成同一问题。这样会带来很多问题，尤其是别的程序员调用你的代码的时候，对你代码部分内存的调用，返回值的位置等等都不能准确的预判。这就使你编码的模板变得很重要。目测现存的汇编存在众多模板/convention可以使用。但要确认你在同一项目中使用相同的convention。<br>#这是一份我觉得比较好用的Convention的reference sheet</p>


	<div class="row">
    <embed src="/images/mipsref2015.pdf" width="100%" height="550" type="application/pdf">
	</div>



<p>要注意的是这并不是全部的指令，对于很多版本的convention还有一些高级指令可以调用。这个版本只是更方便于学生理解。</p>
</li>
<li><p>Loops<br>在很多高级语言中for 和 while loop都只是一句话的事情。 而在mips中，写代码的人却需要考虑loop的位置，branch的具体跳转位置已经else部分应该放在哪里。这种特性就让while loop更容易在mips中实现，而for loop则变得稍微有些蹩脚。</p>
</li>
</ol>
<p>##对于python 的while loop</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">n = int(input(&quot;Enter integer: &quot;))</div><div class="line"></div><div class="line">while (n &gt; 1):</div><div class="line">print(n)</div><div class="line">if n % 2 == 0:</div><div class="line">n = n//2</div><div class="line">else:</div><div class="line">n = 3*n + 1</div><div class="line">print(n)</div></pre></td></tr></table></figure>
<p>转换到mips的逻辑大致是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">aLaberCalledLoop</div><div class="line">.</div><div class="line">beq/bne…aLaberCalledElse</div><div class="line">.</div><div class="line">.</div><div class="line">j aLaberCalledLoop</div><div class="line"></div><div class="line">aLaberCalledElse</div></pre></td></tr></table></figure></p>
<p>这里用到3个概念：laber， jump 和 branch。 都不难理解。如有问题请自行翻阅info sheet。<br>另外对于jump，具体来说可以被分为4种：<br><img src="/images/jumpinmips.png" alt="JumpsInMips"><br>上面的例子用的是最简单的一直，其余的几种都与function的调用与返回有关。其实琢磨一下也没有什么，只是对于$pc（program counter）的值进行写入从而操纵下一行代码读取的位置罢了。</p>
<p>##对于for loop<br>基本的概念是和while loop差不多。这里唯一需要注意的就是else里面statement的写法和在程序中出现的位置。</p>
<p>python 代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def even_product(a_list):</div><div class="line">  product = 1</div><div class="line">  for x in a_list:</div><div class="line">    if x%2 ==0:</div><div class="line">      product=product*x</div><div class="line">  return product</div></pre></td></tr></table></figure></p>
<p>当转换到mips时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">.text</div><div class="line"></div><div class="line">even_product: # save $fp and $ra</div><div class="line">addi $sp, $sp, -8</div><div class="line">sw $ra, 4($sp)</div><div class="line">sw $fp, 0($sp)</div><div class="line"></div><div class="line"># update $fp</div><div class="line">addi $fp, $sp, 0</div><div class="line"></div><div class="line"># allocate local variables</div><div class="line">addi $sp, $sp, -8</div><div class="line"></div><div class="line"># setup product</div><div class="line">li $t0, 1</div><div class="line">sw $t0, -4($fp) # save product</div><div class="line"></div><div class="line"># setup i</div><div class="line">li $t0, 0</div><div class="line">sw $t0, -8($fp) # save i</div><div class="line"></div><div class="line">prodloop: lw $t0, -8($fp) # $t0 = i</div><div class="line">lw $t1, 8($fp) # $t1 = list</div><div class="line">lw $t2, 0($t1) # $t2 = len(list)</div><div class="line">bge $t0, $t2, endprod # check if i &lt; len(list)</div><div class="line"></div><div class="line"># restore x</div><div class="line">lw $t0, -8($fp) # $t0 = i</div><div class="line"></div><div class="line">mul $t3, $t0, 4 # $t3 = 4*i</div><div class="line">addi $t3, $t3, 4 # $t3 = 4*i + 4</div><div class="line">add $t3, $t3, $t1 # $t3 = address of list[i]</div><div class="line">lw $t3, 0($t3) # $t3 = list[i] = x</div><div class="line"></div><div class="line"># if x % 2 == 0</div><div class="line">li $t4, 2</div><div class="line">div $t3, $t4</div><div class="line">mfhi $t4</div><div class="line">bnez $t4, else</div><div class="line"></div><div class="line"> # product = product*x</div><div class="line">lw $t4, -4($fp)</div><div class="line">mul $t4, $t4, $t3</div><div class="line">sw $t4, -4($fp)</div><div class="line"></div><div class="line">else: lw $t0, -8($fp)</div><div class="line">addi $t0, $t0, 1</div><div class="line">sw $t0, -8($fp)</div><div class="line"></div><div class="line">j prodloop</div><div class="line"></div><div class="line"></div><div class="line">endprod: # set return</div><div class="line">lw $v0, -4($fp)</div><div class="line"></div><div class="line"># deallocate variables</div><div class="line">addi $sp, $sp, 8</div><div class="line"></div><div class="line"># restore $fp and $ra</div><div class="line">lw $fp, 0($sp)</div><div class="line">lw $ra, 4($sp)</div><div class="line">addi $sp, $sp, 8</div><div class="line">jr $ra</div></pre></td></tr></table></figure></p>
<p>需要注意的是，很多时候即使for loop中的statement成立，你的代码很可能还是需要执行接下的来的部分，也就是包含else的部分。这种情况下就需要谨慎对待else中的内容。基本上就意味着else中的内容在汇编中并不完全等于在高级语言中的内容。</p>
<ol>
<li>stack</li>
</ol>
<p>首先，在mips中，内存被从上到下分成5块：<br>——–top———<br>.data<br>——-memory——-<br>.text<br>——-memory——-<br>heap<br>——-memory——-<br>free<br>spaces<br>——-memory——-<br>stack<br>——–bottom——<br>这样不难看出，data+text+heap位于内存的顶部，stack位于底部。而heap和stack中间的区域是未被利用的内存空间。使用这种排列方法的原因很简单：应为在程序初始化的时候data+text的大小是已知的。让heap从上往下生长，而stack从底部反向向上生长，所有的空白内存都留在了两者之间。这既保证了最大效率的利用内存，又不用担心如何分配stack的起始点。<br>而这种分配带来的问题就是stack中内存使用的计算是反向的。每次给一个新的function初始化内存的时候，你都需要把pointer向上反向移动。比如现在pointer在0x2ff04(16进制内存地址，不熟悉的小伙伴小时候肯定没用过金手指)， 你要内一个新的程序初始化一个字段的内存，你需要减去4bits (0x2ff04-4 = 0x2ff00)。0x2ff00则是你新内存指针的位置。</p>
<ol>
<li>list<br>mips其实并不提供list这种高级数据格式。对于列表的操作更大程度上依赖于程序员对于stack/heap的理解。</li>
</ol>
<p>——–top———<br>0x7FFF3128<br>——-memory——-<br>0x7FFF312C<br>——-memory——-<br>0x7FFF3130<br>——-memory——-<br>0x7FFF3134<br>——-memory——-<br>0x7FFF3138<br>——-bottom——</p>
<p>比如在如上的内存空间中，如果一开始，你的stack pointer（$sp）在0x7FFF3138的位置，你想写入一个3个单元的list。你需要做的如下：<br> (1)把$sp减去3，向上反向移动3格。新的$sp指向0x7FFF312C<br> (2)把list中的第一个值写入内存空间0x7FFF312C<br> (3)把list中的第二个值写入内存空间0x7FFF3130<br> (4)把list中的第三个值写入内存空间0x7FFF3134<br> 这样你就得到了一个list，占用三个内存空间。需要注意的是mips并不知道这是一个list。作为程序员，在之后的读取中你也要做类似的操作，在记住列表第一个元素的内存地址后，每+4便得到列表下一个值的位置。</p>
<p> 先写这么多吧，在学习路上，如有错路请见谅并在回复中帮我指出谢谢！</p>
]]></content>
      
        <categories>
            
            <category> assembly </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Blog </tag>
            
            <tag> assembly </tag>
            
            <tag> mips </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编码器续]]></title>
      <url>/2017/06/14/encodermore/</url>
      <content type="html"><![CDATA[<p>昨天把编码器接在了模拟信号口上并且胡乱设置了一个1000的阈值去测试，也算是成功了。<br>今天接到数字信号上面用high和low值去学习编码器计数的操作。</p>
<p>上代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/* Read Quadrature Encoder</div><div class="line">  * Connect Encoder to Pins encoder0PinA, encoder0PinB, and +5V.</div><div class="line">  *</div><div class="line">  * Sketch by max wolf / www.meso.net</div><div class="line">  * v. 0.1 - very basic functions - mw 20061220</div><div class="line">  *</div><div class="line">  */  </div><div class="line"></div><div class="line"></div><div class="line"> int val;</div><div class="line"> int encoder0PinA = 3;</div><div class="line"> int encoder0PinB = 4;</div><div class="line"> int encoder0Pos = 0;</div><div class="line"> int encoder0PinALast = LOW;</div><div class="line"> int n = LOW;</div><div class="line"></div><div class="line"> void setup() &#123;</div><div class="line">   pinMode (encoder0PinA,INPUT);  //channel A 插在DIGITAL 3</div><div class="line">   pinMode (encoder0PinB,INPUT);  //channel B 插在DIGITAL 4</div><div class="line">   Serial.begin (9600);           //debuging输出</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> void loop() &#123;</div><div class="line">   n = digitalRead(encoder0PinA); //先读取A电位</div><div class="line">   if ((encoder0PinALast == LOW) &amp;&amp; (n == HIGH)) &#123;  //如果A之前是低电位，现在是高电位</div><div class="line">     if (digitalRead(encoder0PinB) == LOW) &#123;        //那么如果B现在低点位</div><div class="line">       encoder0Pos--;                               //计数减，反转</div><div class="line">     &#125; else &#123;                                       //或者如果B现在是高电位</div><div class="line">       encoder0Pos++;                               //计数加，正转</div><div class="line">     &#125;</div><div class="line">     Serial.print (encoder0Pos);</div><div class="line">     Serial.print (&quot;/&quot;);</div><div class="line">   &#125;</div><div class="line">   encoder0PinALast = n;                            //记录本周期A电位，用于下一周期比较</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这段代码也没什么不好理解的，相比昨天的接线，只需要把encoder接到analog 0/1 的两根针移到digital 3/4上面就行。 逻辑就是记录A频道的电位，并和上一周期A频道的电位进行比较，如果有差别则说明已经发生位移。在证明已经位移的情况下再读取B频道的电位，得出位移的方向是正还是负。这个逻辑可以参考AB频道的脉冲图谱。<br><img src="/images/encoderchannel.jpg" alt="AB频道脉冲"></p>
]]></content>
      
        <categories>
            
            <category> SLAM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SLAM </tag>
            
            <tag> ENCODER </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Arduino读取motor encoder马达编码器]]></title>
      <url>/2017/06/13/encoder/</url>
      <content type="html"><![CDATA[<h1 id="实验室的巨型马达需要维修，上面的光学编码器好像也坏了。所以第一步是要学会编码器是什么玩意。"><a href="#实验室的巨型马达需要维修，上面的光学编码器好像也坏了。所以第一步是要学会编码器是什么玩意。" class="headerlink" title="实验室的巨型马达需要维修，上面的光学编码器好像也坏了。所以第一步是要学会编码器是什么玩意。"></a>实验室的巨型马达需要维修，上面的光学编码器好像也坏了。所以第一步是要学会编码器是什么玩意。</h1><h2 id="鄙人纯软件出身，我知道我写的这些在硬件人士眼中都是儿歌。。。"><a href="#鄙人纯软件出身，我知道我写的这些在硬件人士眼中都是儿歌。。。" class="headerlink" title="鄙人纯软件出身，我知道我写的这些在硬件人士眼中都是儿歌。。。"></a>鄙人纯软件出身，我知道我写的这些在硬件人士眼中都是儿歌。。。</h2><p>网上有很多资料可以查，magnetic encoder, optical encoder 等等。 工作方式都大同小异。当初导师骗我来说让我focus on machine learning &amp; computer vision。 想一想现在我在学什么我就想笑。。。。</p>
<p>总而言之，树莓派读取编码器比较困难， 用arduino可行性比较高。而编码器本身都没有什么区别。基本4~5个针脚的比较多。 我在实验室地上捡到了2个惠普的HEDS-9100 编码器。盒子已经黄了，可能是打印机喷墨头用的吧我猜。。。。<br><a href="https://www.ret.hu/media/product/14593/437102/HEDS-9000.pdf" target="_blank" rel="external">HEDS-9100</a><br><img src="/images/9100.jpg" alt="HEDS-9100"></p>
<p>网上搜了一堆资料，好像这款编码器还挺流行，很多厂家的资料都有详细的描述。5个针脚从左到右分别是ChB,5V,ChA,N/A,GND.  4号针脚意义不明，我也没有去较真。反正另外4个也够我用了。要注意的是很多编码器是带马达供电的，所以会有更多针脚。</p>
<p>连接本身也没有什么太多可说的，Arduino在硬件操作上比树莓派简单多了，也不需要模拟PWM。 除了编码器的供电接口接在arduino的5v和GND上，AB 两个channel接在arduino的ANALOG-IN的0和1上以读取其值。 另外我接了个喇叭在DIGITAL8 上给反馈。喇叭是从旁边的PC主板上拔下来的。。。。LOL 脑海中浮现出FALLOUT 4，我是快乐的破烂王。<br><img src="/images/9100ARDU.jpg" alt="Arduino"><br>呃。。。。找不到合适的东西，就插了个吸管进去。。。。还挺fit…..</p>
<p>代码如下，转动encoder,喇叭会响。赋值那部分有点绕，我也没改，之前玩的时候写了别的没删干净见谅。</p>
<h4 id="代码中的if判断句里面的值选择1000是我观察了它们大概的读数后估计着瞎写的，并没有什么特别意义。但是太敏感的话喇叭会一直响，隔壁的斯里兰卡大哥会不开心。"><a href="#代码中的if判断句里面的值选择1000是我观察了它们大概的读数后估计着瞎写的，并没有什么特别意义。但是太敏感的话喇叭会一直响，隔壁的斯里兰卡大哥会不开心。" class="headerlink" title="代码中的if判断句里面的值选择1000是我观察了它们大概的读数后估计着瞎写的，并没有什么特别意义。但是太敏感的话喇叭会一直响，隔壁的斯里兰卡大哥会不开心。"></a>代码中的if判断句里面的值选择1000是我观察了它们大概的读数后估计着瞎写的，并没有什么特别意义。但是太敏感的话喇叭会一直响，隔壁的斯里兰卡大哥会不开心。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">int pin=8;</div><div class="line">int analogPin0 = 0;</div><div class="line">int analogPin1 = 1;</div><div class="line">int val0 = 0;</div><div class="line">int val1 = 0;</div><div class="line"></div><div class="line">void setup() &#123;</div><div class="line">  // put your setup code here, to run once:</div><div class="line">  pinMode (pin, OUTPUT);</div><div class="line">  Serial.begin(9600);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void loop() &#123;</div><div class="line"></div><div class="line">  if ((val0-analogRead(analogPin0) &gt; 1000)||(val0-analogRead(analogPin0) &lt; -1000))</div><div class="line">  &#123;</div><div class="line">    digitalWrite (pin, HIGH);</div><div class="line">      delay(300);</div><div class="line">    digitalWrite (pin, LOW);</div><div class="line">      delay(300);</div><div class="line">  &#125;</div><div class="line">  else if((val1-analogRead(analogPin1) &gt; 1000)||(val1-analogRead(analogPin1) &lt; -1000))</div><div class="line">  &#123;</div><div class="line">    digitalWrite (pin, HIGH);</div><div class="line">      delay(300);</div><div class="line">    digitalWrite (pin, LOW);</div><div class="line">      delay(300);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  val0 = analogRead(analogPin0);</div><div class="line">  val1 = analogRead(analogPin1);</div><div class="line">  Serial.println(val0, val1);             // debug value</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="已经学会了读取惠普的小编码器，下一步是看看实验室机器人身上的编码器"><a href="#已经学会了读取惠普的小编码器，下一步是看看实验室机器人身上的编码器" class="headerlink" title="已经学会了读取惠普的小编码器，下一步是看看实验室机器人身上的编码器"></a>已经学会了读取惠普的小编码器，下一步是看看实验室机器人身上的编码器</h1><h1 id="E3"><a href="#E3" class="headerlink" title="E3"></a><a href="https://www.usdigital.com/products/e3" target="_blank" rel="external">E3</a></h1>]]></content>
      
        <categories>
            
            <category> SLAM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Blog </tag>
            
            <tag> ENCODER </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新的开始 day1]]></title>
      <url>/2017/06/07/day1/</url>
      <content type="html"><![CDATA[<h1 id="I-spend-all-my-bachelor-amp-master-time-to-learn-to-code-and-study-machine-vision-stuff-Now-as-a-Phd-candidate-my-career-changed-to-SLAM-robotics-which-is-quite-exciting-I-finally-jumped-out-of-the-boundary-of-coding-and-started-to-do-some-real-welding-and-soldering-It-is-not-easy-btw-for-me-a-computer-since-student-to-pick-all-these-EE-knowledge-But-its-lot-of-fun-and-getting-paid-I-would-say-fair-enough"><a href="#I-spend-all-my-bachelor-amp-master-time-to-learn-to-code-and-study-machine-vision-stuff-Now-as-a-Phd-candidate-my-career-changed-to-SLAM-robotics-which-is-quite-exciting-I-finally-jumped-out-of-the-boundary-of-coding-and-started-to-do-some-real-welding-and-soldering-It-is-not-easy-btw-for-me-a-computer-since-student-to-pick-all-these-EE-knowledge-But-its-lot-of-fun-and-getting-paid-I-would-say-fair-enough" class="headerlink" title="I spend all my bachelor &amp; master time to learn to code and study machine vision stuff. Now, as a Phd candidate, my career changed to SLAM robotics, which is quite exciting. I finally jumped out of the boundary of coding and started to do some real welding and soldering. It is not easy, btw, for me, a computer since student to pick all these EE knowledge. But its lot of fun and getting paid. I would say fair enough"></a>I spend all my bachelor &amp; master time to learn to code and study machine vision stuff. Now, as a Phd candidate, my career changed to SLAM robotics, which is quite exciting. I finally jumped out of the boundary of coding and started to do some real welding and soldering. It is not easy, btw, for me, a computer since student to pick all these EE knowledge. But its lot of fun and getting paid. I would say fair enough</h1><p>这几天开始看slam小车的构造，从硬件的角度。<br>以前从未接触过硬件这边，最多只玩过树莓派。</p>
<p>感觉从硬件上说，一个小车/机器人由底盘和各种传感器再加上一个ROS组成。<br>传感器与ROS都比较好理解。对我而言，反而车的底盘成了最神秘的部分。经过一天的阅读，我对底盘的理解有以下几个部分构成：</p>
<ol>
<li>电机 motor</li>
<li>编码器 encoder</li>
<li>驱动板</li>
<li>上层控制电脑 这里可以是树莓派之类，也可以是笔记本电脑之类</li>
<li>电源与电源控制板</li>
</ol>
<p>在阅读中已经学习了PWM（Pulse Width Modulatio）的使用，并在树莓派上测试了一段模拟脉冲宽度调制的python代码，如下：<br><a href="https://www.arduino.cc/en/Tutorial/PWM" target="_blank" rel="external">arduino 关于pwm的介绍</a></p>
<p><img src="/images/pwm.png" alt="Sample Image Added via Markdown"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"></div><div class="line">import RPI.GPIO as GPIO</div><div class="line">import time</div><div class="line">import signal</div><div class="line">import atexit</div><div class="line"></div><div class="line">atexit.register(GPIO.cleanup)</div><div class="line"></div><div class="line">servopin=21</div><div class="line">GPIO.setmode(GPIO.BCM)</div><div class="line">GPIO.setup(servopin,GPIO.OUT,initial=False)</div><div class="line">p=GPIO.PWM(servopin,50)</div><div class="line">p.start(0)</div><div class="line">time.sleep(2)</div><div class="line"></div><div class="line">while(True):</div><div class="line">   for i in range(0,360,10):</div><div class="line">       p.ChangeDutyCycle(12.5-5*i/360)</div><div class="line">       time.sleep(1)</div><div class="line">   for i in  range(0,360,10):</div><div class="line">        p.ChangeCutyCycle(7.5-5*i/360)</div><div class="line">        time.sleep(1)</div></pre></td></tr></table></figure>
<h3 id="但是要注意这里代码对应的舵机是360度舵机，如果测试180度舵机，试试下面这段代码，写的更直接粗暴简单："><a href="#但是要注意这里代码对应的舵机是360度舵机，如果测试180度舵机，试试下面这段代码，写的更直接粗暴简单：" class="headerlink" title="但是要注意这里代码对应的舵机是360度舵机，如果测试180度舵机，试试下面这段代码，写的更直接粗暴简单："></a>但是要注意这里代码对应的舵机是360度舵机，如果测试180度舵机，试试下面这段代码，写的更直接粗暴简单：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">import RPi.GPIO as GPIO</div><div class="line">import time</div><div class="line">import signal</div><div class="line">import atexit</div><div class="line"></div><div class="line">atexit.register(GPIO.cleanup)</div><div class="line"></div><div class="line">servopin1=23</div><div class="line">servopin2=24</div><div class="line">GPIO.setmode(GPIO.BCM)</div><div class="line">GPIO.setup(servopin1,GPIO.OUT,initial=False)</div><div class="line">GPIO.setup(servopin2,GPIO.OUT,initial=False)</div><div class="line">p1=GPIO.PWM(servopin1,50)</div><div class="line">p2=GPIO.PWM(servopin2,50)</div><div class="line">p1.start(7.5)</div><div class="line">time.sleep(1)</div><div class="line"></div><div class="line">#while(True):</div><div class="line">#   for i in range(0,90,15):</div><div class="line">#       p1.ChangeDutyCycle(12.5-5*i/90)</div><div class="line">#       time.sleep(1)</div><div class="line">#   for i in  range(0,90,15):</div><div class="line">#       p2.ChangeCutyCycle(7.5-5*i/90)</div><div class="line">#       time.sleep(1)</div><div class="line">p1.ChangeDutyCycle(6.5)</div><div class="line">time.sleep(1)</div><div class="line">p1.ChangeDutyCycle(2.5)</div><div class="line">time.sleep(1)</div><div class="line">p1.ChangeDutyCycle(11.5)</div><div class="line">time.sleep(1)</div><div class="line"></div><div class="line">p2.start(7.5)</div><div class="line">time.sleep(1)</div><div class="line">p2.ChangeDutyCycle(6.5)</div><div class="line">time.sleep(1)</div><div class="line">p2.ChangeDutyCycle(2.5)</div><div class="line">time.sleep(1)</div><div class="line">p2.ChangeDutyCycle(11.5)</div><div class="line">time.sleep(1)</div></pre></td></tr></table></figure>
<h3 id="在学习中我还是不太明白为何初始电位在7-5，逻辑倒是简单粗暴，实际的PWM值会根据你买的电机有多不靠谱而产生浮动，调整一下就好。"><a href="#在学习中我还是不太明白为何初始电位在7-5，逻辑倒是简单粗暴，实际的PWM值会根据你买的电机有多不靠谱而产生浮动，调整一下就好。" class="headerlink" title="在学习中我还是不太明白为何初始电位在7.5，逻辑倒是简单粗暴，实际的PWM值会根据你买的电机有多不靠谱而产生浮动，调整一下就好。"></a>在学习中我还是不太明白为何初始电位在7.5，逻辑倒是简单粗暴，实际的PWM值会根据你买的电机有多不靠谱而产生浮动，调整一下就好。</h3><p>而且我感觉每次把电机转到最大角度，再拉回来，是不是就是业内统一的初始化方式？ brute force initialization?</p>
<p>附送树莓派1GPIO对照表，如果你也在学这些，请选择没有占用的接口测试舵机。否则舵机会出现迷之抽搐。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/</div><div class="line">#             define from  wiringPi.h            </div><div class="line">#                 3.3V | | 5V            </div><div class="line">#                8/SDA | | 5V            </div><div class="line">#                9/SCL | | GND            </div><div class="line">#                    7 | | 14/TX         </div><div class="line">#                  GND | | 15/RX         </div><div class="line">#                    0 | | 18             </div><div class="line">#                    2 | | GND            </div><div class="line">#                    3 | | 23             </div><div class="line">#                  VCC | | 24             </div><div class="line">#              MOSI/12 | | GND            </div><div class="line">#              MISO/13 | | 25             </div><div class="line">#               SCK/14 | | 8/CE0     </div><div class="line">#                  GND | | 9/CE19      </div><div class="line">#/</div></pre></td></tr></table></figure></p>
<h3 id="舵机并不是重点，主要是通过舵机了解PWM的运作原理。另外值得一提的是树莓派对PWM的控制没有arduino精准，抖动好像是正常的，毕竟这是模拟PWM电路，如果真的手动攒小车的话还是需要一块专业的PWM电机驱动板来完成这个过程再反馈给上层树莓派。这样操作的话貌似会稳定很多。"><a href="#舵机并不是重点，主要是通过舵机了解PWM的运作原理。另外值得一提的是树莓派对PWM的控制没有arduino精准，抖动好像是正常的，毕竟这是模拟PWM电路，如果真的手动攒小车的话还是需要一块专业的PWM电机驱动板来完成这个过程再反馈给上层树莓派。这样操作的话貌似会稳定很多。" class="headerlink" title="舵机并不是重点，主要是通过舵机了解PWM的运作原理。另外值得一提的是树莓派对PWM的控制没有arduino精准，抖动好像是正常的，毕竟这是模拟PWM电路，如果真的手动攒小车的话还是需要一块专业的PWM电机驱动板来完成这个过程再反馈给上层树莓派。这样操作的话貌似会稳定很多。"></a>舵机并不是重点，主要是通过舵机了解PWM的运作原理。另外值得一提的是树莓派对PWM的控制没有arduino精准，抖动好像是正常的，毕竟这是模拟PWM电路，如果真的手动攒小车的话还是需要一块专业的PWM电机驱动板来完成这个过程再反馈给上层树莓派。这样操作的话貌似会稳定很多。</h3><p>哎，伟大旅程的第一步。明天再看看编码器是咋回事儿~</p>
]]></content>
      
        <categories>
            
            <category> SLAM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SLAM </tag>
            
            <tag> PWM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo 使用 material-flow 主题时更正个人描述部分内容的显示错误问题]]></title>
      <url>/2017/06/06/minorfix/</url>
      <content type="html"><![CDATA[<h3 id="意外发现一个小BUG，使用Hexo-Material-Flow-主题的用户如果想要更改自己的用户简介请编辑主题文件夹中-themes-material-flow-layout-widget-about-ejs-中的第七行改成："><a href="#意外发现一个小BUG，使用Hexo-Material-Flow-主题的用户如果想要更改自己的用户简介请编辑主题文件夹中-themes-material-flow-layout-widget-about-ejs-中的第七行改成：" class="headerlink" title="意外发现一个小BUG，使用Hexo Material Flow 主题的用户如果想要更改自己的用户简介请编辑主题文件夹中./themes/material-flow/layout/_widget/about.ejs 中的第七行改成："></a>意外发现一个小BUG，使用Hexo Material Flow 主题的用户如果想要更改自己的用户简介请编辑主题文件夹中./themes/material-flow/layout/_widget/about.ejs 中的第七行改成：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&apos;desc&apos;&gt;&lt;%=config.description %&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>全文件如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&apos;m_widget about&apos;&gt;</div><div class="line">&lt;% if(config.avatar) &#123; %&gt;</div><div class="line">&lt;img class=&apos;avatar waves-image&apos; src=&apos;&lt;%= url_for(config.avatar) %&gt;&apos; /&gt;</div><div class="line">&lt;%&#125; %&gt;</div><div class="line">&lt;div class=&apos;header&apos;&gt;&lt;%=config.author %&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&apos;content&apos;&gt;</div><div class="line">&lt;div class=&apos;desc&apos;&gt;&lt;%=config.description %&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure></p>
<p>否则个人简介永远都是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Tempora mutantur, nos et mutamur in illis ...</div></pre></td></tr></table></figure></p>
<p>不知道我是不是领会错了，那位做主题的大神是不是意在强行推广什么时过境迁唯我独尊的金句~<br>但是改改也没啥不好哈。。。。</p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让git和HEXO记住你的用户名和密码，反正咱也写不出啥值钱的代码]]></title>
      <url>/2017/06/05/rem-pass/</url>
      <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000005125610" target="_blank" rel="external">感谢这位大哥的文章</a><br>看完之后应该就明白了吧。我重述一下：<br>1.打开terminal,使用 ssh-keygen 生成密钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div><div class="line"># Creates a new ssh key using the provided email</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/home/you/.ssh/id_rsa)</div></pre></td></tr></table></figure></p>
<p>使用默认的文件名直接enter，接下来显示如下</p>
<p>Enter passphrase (empty for no passphrase): [Type a passphrase]<br>Enter same passphrase again: [Type passphrase again]<br>按提示输入密码即可（简化流程的话在键入命令 ssh-keygen -t rsa -C “your_email@example.com” 以后的三次提示输入都可以直接回车跳过）。<br>密钥生成成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Your identification has been saved in /home/you/.ssh/id_rsa.</div><div class="line">Your public key has been saved in /home/you/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">…………………此处是密钥内容…………………… your_email@example.com</div></pre></td></tr></table></figure></p>
<p>2.可以选择是在用户设置中添加密钥（Settings –&gt; SSH GPG keys）还是单个项目中添加密钥，在这里我就在我们的博客项目中添加密钥，此处以我的博客为例。<br>在 chengjianhua.github.io 的首页菜单栏中点击 Settings –&gt; Deploy keys –&gt; Add deploy key，然后将生成的 id_rsa.pub 中的内容全选复制到 key 输入框中，然后点击 Add key 完成添加公钥。</p>
<p>接下来测试配置是否成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>如果出现以下内容即表示配置完成并且成功！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</div><div class="line">provide shell access.</div></pre></td></tr></table></figure></p>
<p>这是大哥说的，我测试了，没反应，不知道是不是被屏蔽了，不然我们这些屌丝乱ssh，anyway反正也不影响使用。<br>3.<br>这时我想到了 hexo 的配置文件 _config.yml 中的 deploy 属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:chengjianhua/chengjianhua.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>我将其中的 repo修改成了git@github.com:chengjianhua/chengjianhua.github.io.git，这个时候我再尝试了 $ hexo deploy 果然成功了，就不用输入密码了！</p>
<p>#亲测有效，希望能帮到使用HEXO的同学们</p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RememberPassword]]></title>
      <url>/2017/06/05/RememberPassword/</url>
      <content type="html"><![CDATA[<p>#test</p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo在github写blog]]></title>
      <url>/2017/06/05/Got-it-nailed/</url>
      <content type="html"><![CDATA[<h1 id="搞了半天终于成功"><a href="#搞了半天终于成功" class="headerlink" title="搞了半天终于成功"></a>搞了半天终于成功</h1><h2 id="其实别的blog已经把步骤写的很明白"><a href="#其实别的blog已经把步骤写的很明白" class="headerlink" title="其实别的blog已经把步骤写的很明白"></a>其实别的blog已经把步骤写的很明白</h2><p>!! 但是一定要注意你的github账户本身的设置!!<br><a href="https://gist.github.com/btfak/18938572f5df000ebe06fbd1872e4e39" target="_blank" rel="external">国际友人的本地部署步骤</a></p>
<h2 id="但是在git的账户设置里一定要记得正确设置git-pages"><a href="#但是在git的账户设置里一定要记得正确设置git-pages" class="headerlink" title="但是在git的账户设置里一定要记得正确设置git pages"></a>但是在git的账户设置里一定要记得正确设置git pages</h2><p>否则啥都是扯淡~<br><a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="external">git官方手册传送门</a><br>!!一定注意，你的blog repository的正确命名方式是你的用户名+.github.io!!<br><strong>这一点感觉git里面写的不是很明白，之前忘了加上.github.io，捣鼓了半天也没弄明白</strong></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Testing Post]]></title>
      <url>/2017/06/05/Testing-Post/</url>
      <content type="html"><![CDATA[<p><strong>This is our first post!</strong></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
